openapi: 3.0.0
info:
  title: WasaText
  description: |
    This API allows users to interact with each other 
    on the WasaText app.
    Users can create groups, private chats, send text or image messages, 
    reply, forward or react them.
  version: 1.0.0

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: UUID
      description: |
        Use the user identifier returned by `/login` in the Authorization header.
        Example: `Authorization: Bearer abcdef012345`
  responses:
    UnauthorizedError:
      description: Missing or invalid Authorization header
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
  schemas:
    ImageUpload:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: >
            Image file to upload. Allowed types: jpeg, png, webp.
            Max size: 2MB.
      required:
        - file

security:
  - BearerAuth: []

paths:
  /login:
    post:
      summary: Log in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      security: [] # Override the security header
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: AleMilos
                  pattern: "^[a-zA-Z0-9_]{3,16}$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  /me/username:
    put:
      summary: Set username for a user
      description:
        Change the username for a user. The username must be a string of minum
        length 3 and maximum length 16 and contain only alphabet characters, numbers and underscores.
      operationId: setMyUsername
      requestBody:
        description: Update username if it doesn't already exist
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: alemilos
                  pattern: "^[a-zA-Z0-9_]{3,16}$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: Username successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username successfully updated"
        "400":
          description: Invalid username
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The username must be between 3 and 16 characters and contain only alphanumeric characters or underscores"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /me/photo:
    post:
      summary: Upload a profile image
      description:
        Upload a user's profile image. The image must be of jpeg, png or webp format and its size
        must be at most 2Mb.
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ImageUpload"
      responses:
        "200":
          description: Profile photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile photo updated"
                  photoPath:
                    type: string
                    example: /uploads/profiles/1.png
        "400":
          description: Invalid input image
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: >
                      error:
                      * `First Error`  - No file uploaded.
                      * `Second Error` - Wrong file format. Only jpeg, png and webp are allowed.
                      * `Third Error`  - File too big. The image can't be bigger than 2Mb.
                    enum:
                      - "No file uploaded!"
                      - "Wrong file format. Only jpeg, png and webp are allowed."
                      - "File too big. The image can't be bigger than 2Mb."
                    default: "Wrong file format. Only jpeg, png and webp are allowed."
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /conversations:
    get:
      summary: Get a user's conversations
      description:
        Get all user's conversations. Each conversation entry will contain the conversation fields and
        if present, a lastMessage entry acting as a preview for the conversation.
      operationId: getMyConversations
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    conversationId:
                      type: integer
                    type:
                      type: string
                      enum: [private, group]
                    name:
                      type: string
                    photo_path:
                      type: string
                      nullable: true
                    created_by:
                      type: integer
                    created_at:
                      type: string
                      format: date-time
                    lastMessage:
                      type: object
                      nullable: true
                      properties:
                        id:
                          type: integer
                        type:
                          type: string
                          enum: [text, image]
                        is_forwarded:
                          type: boolean
                        author_id:
                          type: integer
                        content:
                          type: string
                        created_at:
                          type: string
                          format: date-time
              example:
                - conversationId: 7
                  type: group
                  name: Partite Calcio
                  photo_path: "/uploads/groups/7/photo.png"
                  created_by: 31
                  created_at: "2025-09-29T14:48:00Z"
                  lastMessage:
                    id: 239
                    type: text
                    is_forwarded: false
                    author_id: 20
                    content: "Va bene ci sono per stasera, ci vediamo!"
                    created_at: "2025-09-28T16:30:00Z"
                - conversationId: 12
                  type: private
                  name: "Edoardo"
                  photo_path: null
                  created_by: 31
                  created_at: "2025-09-25T09:20:00Z"
                  lastMessage:
                    id: 312
                    type: text
                    is_forwarded: false
                    author_id: 45
                    content: "Ci sentiamo pi√π tardi!"
                    created_at: "2025-09-28T18:10:00Z"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /conversations/{id}:
    get:
      summary: Get a conversation by id
      description:
        Get a conversation with all the messages belonging to it. The converation can either be a
        private chat or a group chat. Each message entry will contain the message fields and
        the message status fields.
      operationId: getConversation
      parameters:
        - name: id
          in: path
          required: true
          description: The conversation id
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    messageId:
                      type: integer
                    type:
                      type: string
                      enum: [text, image]
                    is_forwarded:
                      type: boolean
                    content:
                      type: string
                    author_id:
                      type: integer
                    created_at:
                      type: string
                      format: date-time
                    messageStatus:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [received, read]
                        members:
                          type: array
                          items:
                            type: integer
              example:
                - messageId: 65
                  type: image
                  is_forwarded: true
                  content: "/uploads/groups/7/images/photo123.jpeg"
                  author_id: 3
                  created_at: "2025-09-29T14:48:00Z"
                  messageStatus:
                    status: read
                    members: [1, 2, 3]
                - messageId: 66
                  type: text
                  is_forwarded: false
                  content: "AHHAAHH che ridere!"
                  author_id: 1
                  created_at: "2025-09-29T15:00:00Z"
                  messageStatus:
                    status: received
                    members: [1, 3]
                - messageId: 67
                  type: text
                  is_forwarded: false
                  content: "No vabbe troppo divertente"
                  author_id: 2
                  created_at: "2025-09-29T15:05:00Z"
                  messageStatus:
                    status: received
                    members: [3]
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /conversations/{id}/messages:
    post:
      summary: Send a message to a conversation
      description: Send a new message to the specified conversation.
      operationId: sendMessage
      parameters:
        - name: id
          in: path
          required: true
          description: The conversation id
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - content
              properties:
                type:
                  type: string
                  enum: [text]
                content:
                  type: string
                  description: Text content of the message
            example:
              type: text
              content: "Hello, how are you?"
          multipart/form-data:
            schema:
              type: object
              required:
                - type
                - file
              properties:
                type:
                  type: string
                  enum: [image]
                file:
                  type: string
                  format: binary
                  description: >
                    Image file to send. Allowed types: jpeg, png, webp.
                    Max size: 2MB.
      responses:
        "200":
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: integer
                  type:
                    type: string
                    enum: [text, image]
                  content:
                    type: string
                  created_at:
                    type: string
                    format: date-time
        "400":
          description: Invalid input image
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: >
                      error:
                      * `First Error` - Wrong file format. Only jpeg, png and webp are allowed.
                      * `Second Error`  - File too big. The image can't be bigger than 2Mb.
                    enum:
                      - "Wrong file format. Only jpeg, png and webp are allowed."
                      - "File too big. The image can't be bigger than 2Mb."
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /messages/{id}/forward:
    post:
      summary: Forward a message to a user
      description: Forward a message to another user
      operationId: forwardMessage
      parameters:
        - name: id
          in: path
          required: true
          description: The message id
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: integer
            example:
              userId: 38

      responses:
        "200":
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Message forwarded successfully
        "400":
          description: Invalid user
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: User not found.
              example:
                message: User not found.

        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /messages/{id}/comment:
    post:
      summary: React to a message
      description: React to a message with an emoji.
      operationId: commentMessage
      parameters:
        - name: id
          in: path
          required: true
          description: The message id
          schema:
            type: string
      requestBody:
        description: React to a message with an emoji unicode
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  type: string
                  example: U+2764
                  pattern: "(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff])"
        required: true
      responses:
        "200":
          description: Reacted to message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Reacted to message successfully
        "400":
          description: Invalid emoji unicode
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    description: >
                      error:
                      * `First Error` -Invalid emoji unicode 
                      * `Second Error`  - You have already reacted to this message
                    enum:
                      - "Invalid emoji unicode"
                      - "You have already reacted to this message"
                example:
                  message: Invalid emoji unicode
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /messages/{id}/comment/{commentId}:
    delete:
      summary: Remove message reaction
      description: Delete the emoji reaction from
      operationId: uncommentMessage
      parameters:
        - name: id
          in: path
          required: true
          description: The message id
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          description: The comment id
          schema:
            type: string
      responses:
        "200":
          description: Message reaction deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Message reaction deleted successfully
        "400":
          description: Invalid reaction id
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: Reaction not found.
              example:
                message: Reaction not found.

        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /messages/{id}:
    delete:
      summary: Delete a message
      description: Delete a message if it wasn't created more than 30 minutes ago.
      operationId: deleteMessage
      parameters:
        - name: id
          in: path
          required: true
          description: The message id
          schema:
            type: string
      responses:
        "200":
          description: Message deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Message deleted successfully
        "400":
          description: Message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Message not found
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /groups/{id}/members:
    post:
      summary: Add a new member to a group
      description: Any user belonging to a group can add other users to the group if they are not already there.
      operationId: addToGroup
      parameters:
        - name: id
          in: path
          required: true
          description: The group id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
            example:
              username: alemilos
      responses:
        "200":
          description: Member added to the group successfully.
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Member added to the group successfully

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: >
                      error:
                      * `First Error` - User not found 
                      * `Second Error` - Group not found 
                      * `Third Error` - Forbidden
                    enum:
                      - User not found
                      - Group not found
                      - Forbidden
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Leave a group
      description: A user can remove themselves from a group they belong to.
      operationId: leaveGroup
      parameters:
        - name: id
          in: path
          required: true
          description: The group id
          schema:
            type: string
      responses:
        "200":
          description: Left the group successfully.
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Left the group successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: >
                      error:
                      * `First Error` - Group not found
                      * `Second Error` - User not part of the group
                    enum:
                      - Group not found
                      - User not part of the group
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /groups/{id}/name:
    put:
      summary: Change group name
      description: Update the group name
      operationId: setGroupName
      parameters:
        - name: id
          in: path
          required: true
          description: The group id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
            example:
              name: I ragazzi del calcetto
      responses:
        "200":
          description: Group name changed successfully.
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Group name changed successfully.

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: >
                      error:
                      * `First Error` - Invalid group name 
                      * `Second Error` - Group not found 
                      * `Third Error` - Forbidden
                    enum:
                      - Invalid group name
                      - Group not found
                      - Forbidden
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /groups/{id}/photo:
    put:
      summary: Change group photo
      description: Update the group photo
      operationId: setGroupPhoto
      parameters:
        - name: id
          in: path
          required: true
          description: The group id
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ImageUpload"
      responses:
        "200":
          description: Group photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group photo updated successfully
                  photoPath:
                    type: string
                    example: /uploads/groups/1.png
        "400":
          description: Invalid input image
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    description: >
                      error:
                      * `First Error`  - No file uploaded.
                      * `Second Error` - Wrong file format. Only jpeg, png and webp are allowed.
                      * `Third Error`  - File too big. The image can't be bigger than 2Mb.
                    enum:
                      - "No file uploaded!"
                      - "Wrong file format. Only jpeg, png and webp are allowed."
                      - "File too big. The image can't be bigger than 2Mb."
                    default: "Wrong file format. Only jpeg, png and webp are allowed."
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users:
    get:
      summary: Get all users
      description: Retrieve all users in the application
      operationId: getUsers
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    userId:
                      type: integer
                    photo_path:
                      type: string
                      nullable: true
              example:
                - userId: 1
                  username:
                  photo_path: "/uploads/groups/7/photo.png"
                - userId: 2
                  username:
                  photo_path: null
                - userId: 3
                  username:
                  photo_path: "/uploads/groups/7/photo.png"
                - userId: 4
                  username:
                  photo_path: null
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /groups:
    post:
      summary: Create group
      description: Create a new group
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
            example:
              name: I ragazzi del calcetto
      responses:
        "200":
          description: Group created successfully.
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Group created successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
