openapi: 3.0.0
info:
  title: WasaText
  description: |
    This API allows users to interact with each other 
    on the WasaText app.
    Users can create groups, private chats, send text or image messages, 
    reply, forward, react or comment them.
  version: 0.0.1

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: "^[a-zA-Z0-9_]{3,16}$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  /users/me/username:
    put:
      summary: set username for user
      operationId: setMyUsername
      requestBody:
        description: Update username if it doesn't already exist
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria2
                  pattern: "^[a-zA-Z0-9_]{3,16}$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: Username successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username successfully updated"
        "400":
          description: Invalid username
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The username must be between 3 and 16 characters and contain only alphanumeric characters or underscores"

        "403":
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The username couldn't be updated because it already exists"

  /games:
    post:
      summary: start a new game
      description: |
        Start a new game generating the secret number 
        and return the created game id
      responses:
        "200":
          description: new game created
          content:
            application/json:
              schema:
                type: integer
    get:
      summary: list all games
      description: |
        Obtain the list of all games, with the final result (win/lose) 
        and the number of guesses
      responses:
        "200":
          description: |
            An array of objects, each one containing the game id, 
            the final outcome, and the number of guesses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/final-result"
  /games/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: this is the game id
        schema:
          type: integer
          description: e.g., /games/1234
    put:
      summary: start or reset a game
      description: |
        Start a game with given id, generating the secret number; 
        or reset an existing game, re-generating the secret number 
        and zeroing the guesses counter
      responses:
        "200":
          description: An existing game is reset
        "201":
          description: A new game is created
    post:
      summary: make a guess
      description: |
        Try to guess the secret number; return hi, lo, or correct, 
        plus the guess count.
      parameters:
        - name: guess
          in: query
          required: true
          description: the guess
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        "200":
          description: Guess accepted, the result is in the the content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/guess-result"
        "403":
          description: game over
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/final-result"
        "404":
          description: game not found
    get:
      summary: list guesses
      description: |
        Return a list of all guesses in reverse chronological order, 
        including the responses received (hi/lo/correct)
      responses:
        "200":
          description: Request accepted, all guesses listed in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/guess-result"

components:
  schemas:
    guess-result:
      type: object
      properties:
        guess-count:
          type: integer
          minimum: 1
          maximum: 10
        guess-outcome:
          type: string
          enum:
            - hi
            - lo
            - correct
    final-result:
      type: object
      properties:
        id:
          type: integer
        outcome:
          type: string
          enum:
            - win
            - lose
        guesses:
          type: integer
